<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>最短路径问题</title>
      <link href="/2020/05/09/zui-duan-lu/"/>
      <url>/2020/05/09/zui-duan-lu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="致读者"><a href="#致读者" class="headerlink" title="致读者"></a>致读者</h2><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a href="#tab-id-1">作者信息</a></li><li class="tab"><a href="#tab-id-2">图片哦</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><blockquote><p>致读者： 博主是一名数据科学与大数据专业大二的学生，真正的一个互联网萌新，<font color='#ffb6b9'>写博客一方面是为了记录自己的学习历程，一方面是希望能够帮助到很多和自己一样处于困惑的读者。</font>由于水平有限，博客中难免会有一些错误，有纰漏之处恳请各位大佬不吝赐教！之后会写大数据专业的文章哦。<font color='#ffb6b9'>尽管当前水平可能不及各位大佬，但我会尽我自己所能，做到最好☺</font>。——天地有正气，杂然赋流形。下则为河岳，上则为日星。</p></blockquote></div><div class="tab-pane" id="tab-id-2"><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://api.lyiqk.cn/purelady?cdd6a546" alt=""></p></div></div></div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最短路其实一开始我也不会，感觉，这都是什么啊，好复杂。😭</p><p>😒然后自己给自己制造心理负担。</p><p>然后经过若干次的逛B站终于找到一个大佬，灯神！！！！</p><p>然后我我终于弄懂了最短路，呜呜~~&lt;(＿　＿)&gt;。</p><p>然后又是几个小时的疯狂debug！！！然后发现最后的错误竟然的数组初始化？？！！！</p><p>难道我把基础给丢了？？</p><p>别说了，我已经哭晕在厕所😥</p><p>最后…又是若干次coding，终于！！！</p><div class="note success">            <p>success 👍幸运女神的偏爱让我受宠若惊😀</p>          </div><p>上面的是几个小时的心情🙃，我现在真开心，画了两个小时的图，然后。。。</p><p>我还能说点啥，，</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509192703939.png" alt=""></p><p>虽然换个软件大部分数据都没有丢但是！！！！</p><p>我现在心情比较复杂🙁</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509192811910.png" alt=""></p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="build图"><a href="#build图" class="headerlink" title="build图"></a>build图</h3><div class="note default">            <p>俗话说得好，只要可视化弄的好，内容不重要😏诡辩之术</p>          </div><p>那么我们就塑造一个图形😝来人，上图👇</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509192427334.png" alt=""></p><div class="note info">            <p>因为是另外一个软件转换的，这个画质，，，我枯辽。😭</p><p>看看这样精美的图，可惜了我丢失的数据！！！！啊啊啊啊，谁能告诉我别的画图软件！！</p>          </div><p>这肯定是魔化的最短路径算法，这里呢，我们用到了一种特殊的数据结构 <code>优先队列</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/2020050919341691.png" alt=""></p><table><thead><tr><th>名字</th><th>备注</th></tr></thead><tbody><tr><td>parents</td><td>储存当前结点的父亲</td></tr><tr><td>weight</td><td>表示起点到达该点所需要的权值</td></tr><tr><td>优先队列</td><td>一种数据结构，这个地方每次都取权值最小的一个点</td></tr></tbody></table><div class="note info">            <p>这个地方我们的起点是A终点是F</p>          </div><p>首先我们起点先入队。</p><p>然后此时A结点的父亲就是自己。</p><p>权值为0；</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509194222714.png" alt=""></p><div class="note info">            <p>首先我们先从队列中取出一个元素。也就是队首元素</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509195026932.png" alt=""></p><div class="note info">            <p>然后找到与之相邻的边，而且边上的另一个顶点没有被访问过。</p>          </div>![](https://img-blog.csdnimg.cn/20200509195421185.png)这个时候我们发现与A相连的顶点且没有被访问的是B AND  C到B 的距离是5， 到C的距离是1<div class="note primary no-icon">            <p>这个时候我们其实可以发现 B 是由 A 点经过的。也就是 A - &gt; B 所以 B的父亲是A，距离就是A-&gt;B的距离 + A的权值 0.<br>同理可以得到C</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509200703300.png" alt=""></p><div class="note info">            <p>这个时候A点已经被访问过啦，所以我们要把A点标记或者去除</p>          </div>![](https://img-blog.csdnimg.cn/20200509200914999.png)<div class="note info">            <p>然后继续取出优先队列队首的元素</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509201105660.png" alt=""></p><div class="note info">            <p>找到与C相邻但是没有别访问的顶点</p>          </div>![](https://img-blog.csdnimg.cn/20200509201247420.png)<div class="note warning">            <p>这个时候一定要注意B这个点</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/2020050920154085.png" alt=""></p><blockquote><p><strong>具体分析</strong>：我们会发现，我们第一次标记B的时候，也就是A-&gt;B的权值是5，但是对于顶点C也能够访问到B点，权值就是C的权值加上C-&gt;B的权值。这个地方就等价于A-&gt;C-&gt;B = 3，权值更小，这说明对于起点A来说，到达B的路径中，存在着一条更短的路径，权值为3，所以我们要更新weight[C],同时我们会发现，C访问的B，那不就是说，B的父亲是C吗，所以我们需要更新这两个。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509202245533.png" alt=""></p><div class="note info">            <p>对于顶点D AND E来说，那就比较简单了。</p><p>直接添加父亲结点。</p><p>添加权值信息。</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509202418936.png" alt=""></p><blockquote><p><strong>注意</strong> ：这个时候我们需要把刚刚的BDE三个点和附带的权值信息重新添加进入优先队列。</p><p>这个时候，因为是优先队列，所以会按照权值大小顺序，自动排序。</p><p>同时<strong>因为C点已经访问了</strong>，所以一定要标记。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509202824836.png" alt=""></p><div class="note info">            <p>继续从队列中获取结点B</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509203124241.png" alt=""></p><div class="note info">            <p>找到B相连接的没有被访问的结点。更新权值信息。</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509203307732.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509203406355.png" alt=""></p><blockquote><p><strong>具体分析</strong>：我们会发现，我们第一次标记D的时候，也就是C-&gt;D的权值是5，但是对于顶点B也能够访问到D点，权值就是B的权值加上B-&gt;D的权值。这个地方就等价于A-&gt;C-&gt;B-&gt;D = 4，权值更小，这说明对于起点A来说，到达D的路径中，存在着一条更短的路径，权值为4，所以我们要更新weight[D],同时我们会发现，B访问的D，那不就是说，D的父亲是B吗，所以我们需要更新这两个。</p></blockquote><div class="note warning">            <p>不要忘记把对应的 (D, 4)重新放回优先队列。</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509203919254.png" alt=""></p><div class="note info">            <p>取出结点D。</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509204209106.png" alt=""></p><div class="note info">            <p>更新对应的E AND F点的信息</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/2020050920435190.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509204454323.png" alt=""></p><div class="note info">            <p>标记D点，同时把（E,7）(F,10)入队</p>          </div><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509205429901.png" alt=""></p><div class="note danger">            <p>重点来了！！！！！！！此时我们出队的话，会发现，队首是B。</p><p>但是B已经被访问过了，所以出队直接丢弃，同理D也是如此，E和F已经不能访问到任何其它顶点，所以到这个地方，都是出队的操作了。但是方法还跟上面一样，唯一需要记得的就是B点的情况，出队的顶点已经被访问，直接丢弃。</p>          </div><p><strong>因为软件崩溃数据丢失，上面的是另一个软件转换的。所以不在展示。</strong></p><h3 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h3><p>已经找到最短路径了，该怎么求得路径呢？</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509205959461.png" alt=""></p><p>我们知道结束的点是 F</p><p>F 的父亲是 D</p><p>D 的父亲是 B</p><p>B 的父亲是 C</p><p>C 的父亲是 A</p><p>所以我们可以发现答案是 A -&gt; C -&gt; B -&gt; D -&gt; F</p><p>最短路径是 10</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200509210310378.png" alt=""></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>难受，相当难受，软件崩溃，还好修复回来了部分数据，太难受了，差点所以的数据都丢失😭</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态分区存储管理</title>
      <link href="/2020/05/08/dong-tai-fen-qu-cun-chu-guan-li/"/>
      <url>/2020/05/08/dong-tai-fen-qu-cun-chu-guan-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h2 id="致读者"><a href="#致读者" class="headerlink" title="致读者"></a>致读者</h2><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a href="#tab-id-1">作者信息</a></li><li class="tab"><a href="#tab-id-2">图片哦</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><blockquote><p>致读者： 博主是一名数据科学与大数据专业大二的学生，真正的一个互联网萌新，<font color='#ffb6b9'>写博客一方面是为了记录自己的学习历程，一方面是希望能够帮助到很多和自己一样处于困惑的读者。</font>由于水平有限，博客中难免会有一些错误，有纰漏之处恳请各位大佬不吝赐教！之后会写大数据专业的文章哦。<font color='#ffb6b9'>尽管当前水平可能不及各位大佬，但我会尽我自己所能，做到最好☺</font>。——天地有正气，杂然赋流形。下则为河岳，上则为日星。</p></blockquote></div><div class="tab-pane" id="tab-id-2"><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://api.lyiqk.cn/purelady?cdd6a546" alt=""></p></div></div></div><h2 id="实验相关"><a href="#实验相关" class="headerlink" title="实验相关"></a>实验相关</h2><div class="note primary no-icon">            <p>这个地方介绍实验哦，请点击文章目录跳转.</p>          </div> <h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>熟悉并掌握动态分区分配的各种算法，熟悉并掌握动态分区中分区回收的各种情况，并能够实现分区合并。用高级语言模拟实现动态分区存储管理。</p><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><p>分区分配算法至少实现首次适应算法、最佳适应算法和最坏适应算法中的至少一种。熟悉并掌握各种算法的空闲区组织方式。</p><p>分区的初始化——可以由用户输入初始分区的大小。（初始化后只有一个空闲分区，起始地址为0，大小是用户输入的大小）</p><p>分区的动态分配过程：由用户输入作业号和作业的大小，实现分区过程。</p><p>分区的回收：用户输入作业号，实现分区回收，同时，分区的合并要体现出来。（注意：不存在的作业号要给出错误提示！）</p><p>分区的显示：任何时刻，可以查看当前内存的情况（起始地址是什么，大小多大的分区时空闲的，或者占用的，能够显示出来）。</p><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>（1）内存空间不足的情况，要有相应的显示；</p><p>（2）作业不能同名，但是删除后可以再用这个名字；</p><p>（3）作业空间回收是输入作业名，回收相应的空间，如果这个作业名不存在，也要有相应的提示。</p><p>（4）实验完成后要参加实验答辩。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h3><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>划重点</p>            </div><p>为了输入和展示的方便，这次在代码的基础上增加了一组模拟数据，这个模拟数据是上课讲的例题。内置三种算法，分别是FF、BF、WF，这三种算法的区别就是排序算法的不同。</p><p>初始化内存空间：</p><p>这个地方设置了自定义异常处理类，用来输入整数。</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//img/20200508201617.png" alt=""></p><p>然后选择需要执行的算法</p><p>这个地方设置了异常处理，只能够输入这三个字符，其它字符视为错误，需要重新输入。</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//img/20200508201644.png" alt=""></p><p>首先，我们调用模拟数据直接生成最终的结果：</p><p>作业表状态：</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//img/20200508201849.png" alt=""></p><p>空闲区表状态：</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//img/20200508201910.png" alt=""></p><p>手动制表：</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//img/20200508201924.png" alt=""></p><p>在线绘图：</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//img/20200508201947.png" alt=""></p><p>这个图是使用plt第三方库绘制的图形，采用散点补帧的形式做成类动画效果，当时和自己本来预想的差别好大，自己预想的是能够根据输入动态改变，后来发现难度有点大，于是换成了这种最后结果的方式进行动画效果。</p><p>绘制后图片会自动保存到当前目录下的show.png。</p><p>注意，图形没有绘制结束不能够点击关闭否则会出现异常，只有当绘制完成之后才能够关闭窗口从而执行下一步。</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//img/20200508202044.png" alt=""></p><p>手动输入：考虑输入重复作业名，考虑作业无法分配内存，考虑删除作业不存在或已经删除的情况。</p><p>重复输入：</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//blog/20200508202217.png" alt=""></p><p>无法分配内存</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//blog/20200508202238.png" alt=""></p><p>删除情况</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//blog/20200508202307.png" alt=""></p><p>在任意的时刻都可以查看信息：</p><p>手动打表：</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//blog/20200508202326.png" alt=""></p><p>图形展示：</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//blog/20200508202421.png" alt=""></p><h3 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h3><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/wfy-belief/PicGo-images//blog/20200508202438.png" alt=""></p><p>这个实验我觉的，可以分为几个步骤，第一就是插入作业的时候，判断是否有重复的作业名，基本的思路大致有这几个：1、使用集合，判断这个作业名已经在集合了。2、直接查找，看看能否找到。对于这些方法，使用python都是比较方便的，在这里我使用的方法是 列表生成式 ，然后可以快速判断作业名已经重复。同样的释作业的时候，也需要查看，作业是否运行。插入完作业肯定要更新数据了。</p><p>数据更新：主要分为两个方面，第一个就是作业信息的修改，包括起始地址和结束地址，第二个就是空闲分区是否被利用，如果成功分配并被利用，那么肯定要更新空闲区表，更新空闲区表的起始地址和结束地址，如果这个分区的大小位0，那么就移除这个分区。</p><p>释放作业关于分区的释放：分区释放存在两方面的问题，同样是作业信息的修改和空闲分区的修改。作业信息的修改，其实就是，从内存里移除，然后修改作业的状态和作业的起始地址与结束地址。对于空闲区表的修改就有点复杂了，主要分为三种情况：1、释放后与前面的空闲分区合并；2、释放后与后面的空闲分区合并；3、释放后与前面后面的空闲分区合并。不过概括起来就是两个，前面的判断就是空闲分区的结束地址是否和当前作业的起始地址一样，后面的判断就是空闲分区的起始地址是否和当前作业的结束地址一样。</p><p>排序函数就是分别处理空闲分区的三种情况。FF首次适应算法，所以分区的排序方式应该是按照起始地址排序。BF最佳适应算法，按照空闲分区从小到大的顺序进行排序。WF与最佳适应算法的排序方法刚好相反。</p><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><div class="note warning">            <p>代码比较长，所以隐藏展示</p>          </div><details green><summary> <p>点击这里查看代码</p> </summary>              <div class='content'>              <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: wfy</span></span><br><span class="line"><span class="comment"># @Date:   2020-05-03 11:07:17</span></span><br><span class="line"><span class="comment"># @Last Modified by:   wfy</span></span><br><span class="line"><span class="comment"># @Last Modified time: 2020-05-04 09:09:20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for Solution"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, size)</span>:</span></span><br><span class="line">        super(Solution, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line">        self.size = size</span><br><span class="line">        self.start = <span class="literal">None</span></span><br><span class="line">        self.end = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for Memory"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, size, method)</span>:</span></span><br><span class="line">        super(Memory, self).__init__()</span><br><span class="line">        self.size = size</span><br><span class="line">        self.had_free = []</span><br><span class="line">        self.works = []</span><br><span class="line">        self.free = [&#123;<span class="string">'start'</span>: <span class="number">0</span>, <span class="string">'end'</span>: size, <span class="string">'size'</span>: size&#125;]</span><br><span class="line">        self.method = method</span><br><span class="line">        self.speed = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_work</span><span class="params">(self, work)</span>:</span></span><br><span class="line">        names = [i.name <span class="keyword">for</span> i <span class="keyword">in</span> self.works]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> work.name <span class="keyword">in</span> names <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_work</span><span class="params">(self, work)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.find_work(work):</span><br><span class="line">            <span class="keyword">return</span> exec(<span class="string">"print('error 作业已存在')"</span>)</span><br><span class="line">        work = self.update(work)</span><br><span class="line">        <span class="keyword">if</span> work <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.works.append(work)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">free_work</span><span class="params">(self, work)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.find_work(work):</span><br><span class="line">            <span class="keyword">return</span> exec(<span class="string">"print('error 没有该作业')"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.works)):</span><br><span class="line">            <span class="keyword">if</span> self.works[i].name == work.name:</span><br><span class="line">                work = self.works[i]</span><br><span class="line">                self.works.pop(i)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        self.update_space(work)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_space</span><span class="params">(self, work)</span>:</span></span><br><span class="line">        <span class="string">'''合并空闲空间'''</span></span><br><span class="line">        self.had_free.append(work)</span><br><span class="line">        <span class="comment"># 需要合并</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.free <span class="keyword">and</span> i &lt; len(self.free):</span><br><span class="line">            <span class="comment"># 前面有空间</span></span><br><span class="line">            <span class="keyword">if</span> self.free[i][<span class="string">'end'</span>] == work.start:</span><br><span class="line">                work.start = self.free[i][<span class="string">'start'</span>]</span><br><span class="line">                self.free.pop(i)</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> self.free <span class="keyword">and</span> i &lt; len(self.free):</span><br><span class="line">            <span class="comment"># 后面有空间</span></span><br><span class="line">            <span class="keyword">if</span> work.end == self.free[i][<span class="string">'start'</span>]:</span><br><span class="line">                work.end = self.free[i][<span class="string">'end'</span>]</span><br><span class="line">                self.free.pop(i)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        self.free.append(&#123;<span class="string">'start'</span>: work.start, <span class="string">'end'</span>: work.end,</span><br><span class="line">                          <span class="string">'size'</span>: work.end - work.start&#125;)</span><br><span class="line">        self.free.sort(key=self.sort_methods())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort_methods</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.method.lower() <span class="keyword">in</span> [<span class="string">'ff'</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span> x: x[<span class="string">'start'</span>]</span><br><span class="line">        <span class="keyword">if</span> self.method.lower() <span class="keyword">in</span> [<span class="string">'bf'</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">lambda</span> x: x[<span class="string">'size'</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">lambda</span> x: (-x[<span class="string">'size'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self)</span>:</span></span><br><span class="line">        space = []</span><br><span class="line">        print(<span class="string">"-"</span>*<span class="number">11</span> + <span class="string">"作业表"</span> + <span class="string">"-"</span> * <span class="number">11</span>)</span><br><span class="line">        print(<span class="string">"名称  大小   起始地址  结束地址"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.works)):</span><br><span class="line">            space.append(</span><br><span class="line">                &#123;<span class="string">'start'</span>: self.works[i].start, <span class="string">'end'</span>: self.works[i].end, <span class="string">'size'</span>: self.works[i].size, <span class="string">'free'</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">            print(<span class="string">"&#123;:&lt;6&#125;&#123;:&lt;6&#125;&#123;:&lt;10&#125;&#123;:&lt;10&#125;"</span>.format(</span><br><span class="line">                self.works[i].name, self.works[i].size, self.works[i].start, self.works[i].end))</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"-"</span>*<span class="number">11</span> + <span class="string">"空闲区表"</span> + <span class="string">"-"</span> * <span class="number">11</span>)</span><br><span class="line">        print(<span class="string">"序号  大小   起始地址  结束地址"</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.free)):</span><br><span class="line">            space.append(&#123;<span class="string">'start'</span>: self.free[i][<span class="string">'start'</span>], <span class="string">'end'</span>: self.free[i]</span><br><span class="line">                          [<span class="string">'end'</span>], <span class="string">'size'</span>: self.free[i][<span class="string">'size'</span>], <span class="string">'free'</span>: <span class="literal">True</span>&#125;)</span><br><span class="line">            print(<span class="string">"&#123;:&lt;6&#125;&#123;:&lt;6&#125;&#123;:&lt;10&#125;&#123;:&lt;10&#125;"</span>.format(</span><br><span class="line">                i, self.free[i][<span class="string">'size'</span>], self.free[i][<span class="string">'start'</span>], self.free[i][<span class="string">'end'</span>]))</span><br><span class="line">        print(<span class="string">'*'</span> * <span class="number">30</span>)</span><br><span class="line">        space.sort(key=<span class="keyword">lambda</span> x: x[<span class="string">'start'</span>])</span><br><span class="line">        <span class="keyword">for</span> tmp <span class="keyword">in</span> space:</span><br><span class="line">            print(<span class="string">"-"</span>*<span class="number">20</span> + <span class="string">"——————&gt;"</span> + str(tmp[<span class="string">'start'</span>]))</span><br><span class="line">            <span class="keyword">if</span> tmp[<span class="string">'free'</span>]:</span><br><span class="line">                print(<span class="string">'|                   |'</span>)</span><br><span class="line">                print(<span class="string">'|       '</span> + <span class="string">'free'</span> + <span class="string">'        |——————&gt;空闲区'</span>)</span><br><span class="line">                print(<span class="string">'|                   |'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'|···················|'</span>)</span><br><span class="line">                print(<span class="string">'|·······'</span> + <span class="string">'busy'</span> + <span class="string">'········|——————&gt;作业使用'</span>)</span><br><span class="line">                print(<span class="string">'|···················|'</span>)</span><br><span class="line">        print(<span class="string">"-"</span>*<span class="number">20</span> + <span class="string">"——————&gt;"</span> + str(self.size))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, work)</span>:</span></span><br><span class="line">        <span class="string">'''新增作业'''</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.free)):</span><br><span class="line">            <span class="keyword">if</span> work.size &lt;= self.free[i][<span class="string">'size'</span>]:</span><br><span class="line">                <span class="comment"># 更新空闲区表</span></span><br><span class="line">                self.free[i][<span class="string">'size'</span>] -= work.size</span><br><span class="line">                work.start = self.free[i][<span class="string">'start'</span>]</span><br><span class="line">                work.end = work.start + work.size</span><br><span class="line">                self.free[i][<span class="string">'start'</span>] = work.end</span><br><span class="line">                <span class="keyword">if</span> self.free[i][<span class="string">'size'</span>] == <span class="number">0</span>:</span><br><span class="line">                    self.free.pop(i)</span><br><span class="line">                <span class="keyword">return</span> work</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"没有足够的空闲空间"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_y_ticks</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init_image</span><span class="params">(self)</span>:</span></span><br><span class="line">        fig = plt.figure(<span class="string">'lab_three'</span>, figsize=(<span class="number">4.5</span>, <span class="number">7</span>))</span><br><span class="line">        plt.title(<span class="string">'the lab of memory'</span>)</span><br><span class="line">        plt.xticks([])</span><br><span class="line">        plt.yticks([])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ani_fun</span><span class="params">(self, x1, x2, y1, y2)</span>:</span></span><br><span class="line">        <span class="string">'''补帧'''</span></span><br><span class="line">        x = np.linspace(x1, x2, <span class="number">30</span>)</span><br><span class="line">        y = np.linspace(y1, y2, <span class="number">30</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">29</span>):</span><br><span class="line">            plt.plot([x[i], x[i + <span class="number">1</span>]], [y[i], y[i + <span class="number">1</span>]], color=<span class="string">'k'</span>)</span><br><span class="line">            plt.pause(<span class="number">0.005</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drow_image</span><span class="params">(self)</span>:</span></span><br><span class="line">        plt.plot([<span class="number">120</span>, <span class="number">120</span>], [<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> work <span class="keyword">in</span> self.works:</span><br><span class="line">            <span class="comment"># right down left top</span></span><br><span class="line">            x = [<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">            y = [work.start, work.start, work.end, work.end, work.start]</span><br><span class="line">            self.ani_fun(<span class="number">0</span>, <span class="number">100</span>, work.start, work.start)</span><br><span class="line">            self.ani_fun(<span class="number">100</span>, <span class="number">100</span>, work.start, work.end)</span><br><span class="line">            self.ani_fun(<span class="number">100</span>, <span class="number">0</span>, work.end, work.end)</span><br><span class="line">            self.ani_fun(<span class="number">0</span>, <span class="number">0</span>, work.end, work.start)</span><br><span class="line">            plt.fill(x, y, color=<span class="string">'g'</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">            plt.text(<span class="number">50</span>, (work.start + work.end) / <span class="number">2</span>, <span class="string">r'$work \ name:%s$'</span> %</span><br><span class="line">                     str(work.name), ha=<span class="string">'center'</span>)</span><br><span class="line">            plt.pause(self.speed)</span><br><span class="line">            plt.annotate(<span class="string">r'$%d$'</span> % work.start, xy=(<span class="number">100</span>, work.start), xycoords=<span class="string">'data'</span>, xytext=(+<span class="number">30</span>, <span class="number">-30</span>),</span><br><span class="line">                         textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>, arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line">            plt.pause(self.speed)</span><br><span class="line">            plt.annotate(<span class="string">r'$%d$'</span> % work.end, xy=(<span class="number">100</span>, work.end), xycoords=<span class="string">'data'</span>, xytext=(</span><br><span class="line">                <span class="number">30</span>, <span class="number">-30</span>), textcoords=<span class="string">'offset points'</span>, fontsize=<span class="number">16</span>, arrowprops=dict(arrowstyle=<span class="string">'-&gt;'</span>, connectionstyle=<span class="string">"arc3,rad=.2"</span>))</span><br><span class="line">            plt.pause(self.speed)</span><br><span class="line">        <span class="keyword">for</span> space <span class="keyword">in</span> self.free:</span><br><span class="line">            <span class="comment"># right down left top</span></span><br><span class="line">            self.ani_fun(<span class="number">0</span>, <span class="number">100</span>, space[<span class="string">'start'</span>], space[<span class="string">'start'</span>])</span><br><span class="line">            self.ani_fun(<span class="number">100</span>, <span class="number">100</span>, space[<span class="string">'start'</span>], space[<span class="string">'end'</span>])</span><br><span class="line">            self.ani_fun(<span class="number">100</span>, <span class="number">0</span>, space[<span class="string">'end'</span>], space[<span class="string">'end'</span>])</span><br><span class="line">            self.ani_fun(<span class="number">0</span>, <span class="number">0</span>, space[<span class="string">'end'</span>], space[<span class="string">'start'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_ax</span><span class="params">(self)</span>:</span></span><br><span class="line">        ax = plt.gca()  </span><br><span class="line">        ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">        ax.spines[<span class="string">'bottom'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">        ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">        ax.spines[<span class="string">'left'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">        ax.xaxis.set_ticks_position(<span class="string">'top'</span>) </span><br><span class="line">        ax.invert_yaxis()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_image</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.init_image()</span><br><span class="line">        self.set_ax()</span><br><span class="line">        self.drow_image()</span><br><span class="line">        plt.savefig(<span class="string">'show.png'</span>, dpi=<span class="number">300</span>)</span><br><span class="line">        plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ErrorInfo)</span>:</span></span><br><span class="line">        super().__init__(self)  <span class="comment"># 初始化父类</span></span><br><span class="line">        self.errorinfo = ErrorInfo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.errorinfo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            size = int(input(<span class="string">'请输入合法内存整数大小\n'</span>))</span><br><span class="line">            method = input(<span class="string">'请输入需要执行的算法：FF、BF、WF.不区分大小写\n'</span>)</span><br><span class="line">            <span class="keyword">if</span> method.lower() <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'ff'</span>, <span class="string">'bf'</span>, <span class="string">'wf'</span>]:</span><br><span class="line">                <span class="keyword">raise</span> CustomError(<span class="string">"唔,输入的方法不正确哦。"</span>)</span><br><span class="line">            memory = Memory(size, method)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"执行错误："</span>, e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"内存生成成功"</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> input(<span class="string">'是否需要使用模拟数据：y/n\n'</span>) <span class="keyword">in</span> [<span class="string">'y'</span>]:</span><br><span class="line">        memory.get_work(Solution(<span class="number">0</span>, <span class="number">300</span>))</span><br><span class="line">        memory.get_work(Solution(<span class="number">1</span>, <span class="number">100</span>))</span><br><span class="line">        memory.free_work(Solution(<span class="number">0</span>, <span class="number">300</span>))</span><br><span class="line">        memory.get_work(Solution(<span class="number">2</span>, <span class="number">150</span>))</span><br><span class="line">        memory.get_work(Solution(<span class="number">3</span>, <span class="number">30</span>))</span><br><span class="line">        memory.get_work(Solution(<span class="number">4</span>, <span class="number">40</span>))</span><br><span class="line">        memory.get_work(Solution(<span class="number">5</span>, <span class="number">60</span>))</span><br><span class="line">        memory.free_work(Solution(<span class="number">3</span>, <span class="number">30</span>))</span><br><span class="line">        memory.put()</span><br><span class="line">        memory.show_image()</span><br><span class="line">        exit()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        print(<span class="string">'1:申请内存\t\n2:释放内存\t\n3:手动打表\t\n4:图形展示\t\n5:退出\n'</span>)</span><br><span class="line">        flag = input(<span class="string">'请输入执行的编号'</span>)</span><br><span class="line">        <span class="keyword">if</span> flag == <span class="string">'1'</span>:</span><br><span class="line">            name = input(<span class="string">'请输入作业名字\n'</span>)</span><br><span class="line">            size = int(input(<span class="string">'请输入作业整数大小'</span>))</span><br><span class="line">            memory.get_work(Solution(name, size))</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'2'</span>:</span><br><span class="line">            name = input(<span class="string">'请输入释放的作业名'</span>)</span><br><span class="line">            memory.free_work(Solution(name, <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'3'</span>:</span><br><span class="line">            memory.put()</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'4'</span>:</span><br><span class="line">            memory.show_image()</span><br><span class="line">        <span class="keyword">elif</span> flag == <span class="string">'5'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'输入的内容不合法，请重新输入'</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建设</title>
      <link href="/2020/05/06/bo-ke-da-jian/"/>
      <url>/2020/05/06/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="文章推送"><a href="#文章推送" class="headerlink" title="文章推送"></a>文章推送</h3><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认 true)</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr></tbody></table><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>参考文档 <a href="https://docs.jerryc.me/#/zh-cn/config/theme-page?id=post-front-matter" target="_blank" rel="noopener">中文文档</a></p><p>参考博客 <a href="https://www.antmoe.com/categories/Hexo/" target="_blank" rel="noopener">小康博客</a></p><p>参考博客 <a href="https://xingjiahui.top/" target="_blank" rel="noopener">XJHui’s Blog</a></p><p>参考博客 <a href="https://xiabor.com/" target="_blank" rel="noopener">Xuexi’s Blog</a></p><p>推送github  <a href="https://blog.csdn.net/m0_38064214/article/details/84504904" target="_blank" rel="noopener">参考</a></p><p>域名绑定 <a href="https://segmentfault.com/a/1190000011203711" target="_blank" rel="noopener">参考</a> </p>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客md写法</title>
      <link href="/2020/05/05/test/"/>
      <url>/2020/05/05/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>来源 <a href="https://docs.jerryc.me/#/zh-cn/config/theme-config?id=%e6%a0%87%e7%ad%be%e5%a4%96%e6%8c%82%ef%bc%88tag-plugins%ef%bc%89" target="_blank" rel="noopener">https://docs.jerryc.me/#/zh-cn/config/theme-config?id=%e6%a0%87%e7%ad%be%e5%a4%96%e6%8c%82%ef%bc%88tag-plugins%ef%bc%89</a></p><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><h3 id="note-提示"><a href="#note-提示" class="headerlink" title="note 提示"></a>note 提示</h3><div class="note default">            <p>default 提示块标签</p>          </div><div class="note primary no-icon">            <p>primary 提示块标签</p>          </div><div class="note success">            <p>success 提示块标签</p>          </div><div class="note info">            <p>info 提示块标签</p>          </div><div class="note warning">            <p>warning 提示块标签</p>          </div><div class="note danger">            <p>danger 提示块标签</p>          </div><details green><summary> <p>点击这里查看代码</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">来源 https:&#x2F;&#x2F;docs.jerryc.me&#x2F;#&#x2F;zh-cn&#x2F;config&#x2F;theme-config?id&#x3D;%e6%a0%87%e7%ad%be%e5%a4%96%e6%8c%82%ef%bc%88tag-plugins%ef%bc%89</span><br><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>来源： <a href="https://volantis.js.org/v2/tag-plugins/" target="_blank" rel="noopener">https://volantis.js.org/v2/tag-plugins/</a></p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><div class="btns circle grid5">            <a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a href='https://xaoxuu.com' target="_blank" rel="noopener" title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><details green><summary> <p>点击这里查看代码</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https:&#x2F;&#x2F;xaoxuu.com, https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;avatar&#x2F;avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="tab标签"><a href="#tab标签" class="headerlink" title="tab标签"></a>tab标签</h3><div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a href="#tab-id-1">tab-name</a></li><li class="tab"><a href="#tab-id-2">tab-name</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://i.loli.net/2020/03/18/f5PQlWisvm9zbgK.jpg" alt=""></p></div><div class="tab-pane" id="tab-id-2"><p>这里面写内容，支持的语法格式有限，请尽量<u>不要</u>写太过复杂的东西。</p></div></div></div><details green><summary> <p>点击这里查看代码</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs tab-id %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab tab-name --&gt;</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;03&#x2F;18&#x2F;f5PQlWisvm9zbgK.jpg)</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab tab-name --&gt;</span><br><span class="line"></span><br><span class="line">这里面写内容，支持的语法格式有限，请尽量&lt;u&gt;不要&lt;&#x2F;u&gt;写太过复杂的东西。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h3><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><details green><summary> <p>点击这里查看代码</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [markdown](https:&#x2F;&#x2F;guides.github.com&#x2F;features&#x2F;mastering-markdown&#x2F;) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><h3 id="代码折叠"><a href="#代码折叠" class="headerlink" title="代码折叠"></a>代码折叠</h3><details ><summary> <p>查看图片测试</p> </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> <p>查看默认打开的折叠框</p> </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> <p>查看代码测试</p> </summary>              <div class='content'>                            </div>            </details><details yellow><summary> <p>查看列表测试</p> </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> <p>查看嵌套测试</p> </summary>              <div class='content'>              <details blue><summary> <p>查看嵌套测试2</p> </summary>              <div class='content'>              <details ><summary> <p>查看嵌套测试3</p> </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><details green><summary> <p>点击这里查看代码</p> </summary>              <div class='content'>              <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-wallpaper&#x2F;abstract&#x2F;41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha &lt;span&gt;&lt;img src&#x3D;&#39;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;xaoxuu&#x2F;cdn-assets&#x2F;emoji&#x2F;tieba&#x2F;%E6%BB%91%E7%A8%BD.png&#39; style&#x3D;&#39;height:24px&#39;&gt;&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
          <category> hexo </category>
          
          <category> butterfly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Volantis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再也不用c刷题了</title>
      <link href="/2020/05/05/zai-ye-bu-yong-c-shua-ti-liao-c-shua-ti-bi-bei/"/>
      <url>/2020/05/05/zai-ye-bu-yong-c-shua-ti-liao-c-shua-ti-bi-bei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>致读者： 博主是一名数据科学与大数据专业大二的学生，真正的一个互联网萌新，<font color='#ffb6b9'>写博客一方面是为了记录自己的学习历程，一方面是希望能够帮助到很多和自己一样处于困惑的读者。</font>由于水平有限，博客中难免会有一些错误，有纰漏之处恳请各位大佬不吝赐教！之后会写大数据专业的文章哦。<font color='#ffb6b9'>尽管当前水平可能不及各位大佬，但我会尽我自己所能，做到最好☺</font>。——天地有正气，杂然赋流形。下则为河岳，上则为日星。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://api.lyiqk.cn/purelady?cdd6a546" alt=""></p><p>csdn出处 <a href="https://blog.csdn.net/weixin_43906799/article/details/105889649" target="_blank" rel="noopener">博客链接</a></p><p>还记得大一上学期含泪用c刷题，那感觉简直爽的不行，后来结识c++发现我错过了一个亿，所以分享一下用<code>c++</code>刷题所用到的基础知识。</p><p>结识算法和OJ就是在大学阶段，当时老师提到OJ，我也是一脸懵，啥是OJ？</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200502155944570.jpeg#pic_center" alt=""></p><p>后来慢慢开始入门，从校赛第三名，到后来的ACM培训，经历了很多，也学习了很多东西。刷题大约有1000多道了，以后刷题应该暂时不会了，大二就要学习我们大数据专业知识啦。</p><h3 id="从c-gt-c"><a href="#从c-gt-c" class="headerlink" title="从c-&gt;c++"></a>从c-&gt;c++</h3><p><strong>C语言作为初学者的一门语言，为什么从大一就要开始学呐？</strong></p><ul><li>相较于其它编程语言（<code>python</code>），<code>C</code>语言是一个比较低级的语言，这样低级的语言，往往能够让我们更加了解计算机。</li><li>因为比较底层，C语言的执行效率比较高，同样的程序执行效果，肯定C语言执行速度快。</li><li>C语言作为编程界历史最悠久的语言之一，而且至今仍然流行。</li><li>如果学习过C语言，就能发现学习后面再学习任何高级编程语言都变得轻而易举。</li></ul><p>同时，正因为C语言什么都没有，排序，字符串，栈，队列等等，如果刷题的时候，都要自己去实现的话，未免有点浪费时间（前提是你已经很熟悉了，比较基础才是重中之重，知其然，更要知其所以然），所以使用c++刷题，能够提升效率一大截。</p><ul><li><code>c++</code>能够完全支持<code>c</code>，打开一个<code>c++</code>文件，用<code>c</code>语言的知识写，完全能够运行（关键字不冲突情况下）。</li><li><code>c++</code>的<code>STL</code>模板库，刷题必备啊！！！栈和队列，集合，向量。用过的都说好。</li><li>字符串处理更加方便，字符数组的方式，每次都不太方便，还有注意<code>\0</code> 结束符的问题。</li></ul><p>学会了这些，走向人生……</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://pic.cr173.com/up/2016-10/20161028134135986080.jpg!320_500" alt=""></p><h3 id="C-头文件"><a href="#C-头文件" class="headerlink" title="C++头文件"></a>C++头文件</h3><p>如果就是为了刷题，那其实就很简单了。</p><p>C语言我们知道头文件是以 <code>#include&lt;stdio.h&gt;</code> 导入头文件，而C++则是用 <code>#include&lt;iostream&gt;</code> 导入头文件。</p><p>如果我们想调用C语言头文件怎么办，那就是就是去掉 <code>.h</code> 然后前面加上 <code>c</code>。</p><p>例如，在c++里面引入c语言输入输出的头文件。</p><p><code>#include&lt;cstdio&gt;</code> 这样就能够成功导入了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; // 相当于C语⾔⾥⾯的#include &lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; // 相当于C语⾔⾥⾯的#include &lt;stdib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt; // 相当于C语⾔⾥⾯的#include &lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; // 相当于C语⾔⾥⾯的#include &lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>刷题时候都是为了方便，所以才使用 <code>using namespace std;</code> 这样想使用什么直接写就行了。</p><p>如果不这样引入，你写的算法可能是这样的 <code>std::</code> 占据注意地方，而且会影响比赛，刷题速度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>引入之后：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>看着美观多了。</p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p> <strong>标准输入流（<code>cin</code>）</strong></p><p>预定义的对象 <strong><code>cin</code></strong> 是 <strong>iostream</strong> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<strong><code>cin</code></strong> 是与流提取运算符 &gt;&gt; 结合使用的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>标准输出流（<code>cout</code>）</strong></p><p>预定义的对象 <strong><code>cout</code></strong> 是 <strong><code>iostream</code></strong> 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。<strong><code>cout</code></strong> 是与流插入运算符 &lt;&lt; 结合使用的，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[] = <span class="string">"Hello C++"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of str is : "</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流插入运算符 &lt;&lt; 在一个语句中可以多次使用，如上面实例中所示，<strong><code>endl</code></strong> 用于在行末添加一个换行符。</p><p><code>cin</code> 和 <code>cout</code> ⽐较⽅便，不⽤像C语⾔⾥的<code>scanf</code>、<code>printf</code>那样写得那样繁琐，<code>cin &gt;&gt; n;</code>和<code>scanf(&quot;%d&quot;, &amp;n);</code>⼀样（⽽且⽤cin再也不⽤担⼼像<code>scanf</code>⼀样忘记写取地址符&amp;了）<br>同样，<code>cout &lt;&lt; n;</code>和<code>printf(&quot;%d&quot;, n);</code>此时<code>cout</code>是向左的两个箭头，注意和<code>cin</code>区分开来。⽽且不管<code>n</code>是<code>double</code>还是<code>int</code>或者是<code>char</code>类型，只⽤写<code>cin &gt;&gt; n;</code> 和<code>cout &lt;&lt; n;</code>这样简单的语句就好，不⽤像C语⾔中需要根据n的类型对应地写<code>%lf、%d、%c</code>这样麻烦。 </p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>c++</code>用到最多的就是字符串了，跟之前的字符数组类似，但是字符数组，操作起来相当麻烦，显然使用<code>c++</code>的字符串会方便的多。</p><p><strong>定义一个字符串</strong>，导入库 <code>&lt;string&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"hello world"</span>;<span class="comment">//赋值</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">s = <span class="string">"world"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p><strong>字符串拼接</strong>（可以直接相加）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">" world"</span>;</span><br><span class="line"><span class="built_in">string</span> s = s1 + s2;<span class="comment">//拼接直接使用 + 号</span></span><br></pre></td></tr></table></figure><p><strong>读入字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s; <span class="comment">// 定义⼀个空字符串s</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;<span class="comment">//不包括空格</span></span><br><span class="line">getline(<span class="built_in">cin</span>, s); <span class="comment">// 读取⼀整⾏的字符串，包括空格</span></span><br></pre></td></tr></table></figure><p><strong>字符串长度</strong>(两种方法等价)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = s.size();<span class="comment">//字符串s的⻓度</span></span><br><span class="line"><span class="keyword">int</span> len = s.length();<span class="comment">//字符串s的⻓度</span></span><br></pre></td></tr></table></figure><p><strong>查找字符串t是否是s的子串</strong></p><p>如果t是s的子串则返回首次匹配的位置，否则返回 string::npos 或 -1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.find(t);</span><br></pre></td></tr></table></figure><p><code>begin</code> 和 <code>end</code> 方法</p><p>begin()函数返回一个迭代器,指向字符串的<font color = red>第一个元素</font>.返回值是字符串的首地址，取值为*</p><p>end()函数返回一个迭代器,指向字符串的<font color = red>最后一个元素</font>.返回值是字符串的首地址，取值为*</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">" world"</span>;</span><br><span class="line">s1.append(s2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*s1.begin()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*s1.end()&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>反转字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"hello world"</span>;</span><br><span class="line">reverse(s.begin(), s.end());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">dlrow olleh</span><br></pre></td></tr></table></figure><p><strong>截取某个字符串中的⼦串</strong> <code>substr</code> 这个函数在处理字符串的题目很常用，当然，用这个方法很多时候会 <font color = red><code>TLE</code></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">string</span> s1 = s.substr(<span class="number">6</span>);<span class="comment">//下标6开始到结束</span></span><br><span class="line"><span class="built_in">string</span> s2 = s.substr(<span class="number">0</span>, <span class="number">11</span>);<span class="comment">//下标0开始，截取11个字符</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>使用标准库的栈和队列时，先包含相关的头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.empty()               如果栈为空返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span><br><span class="line">s.size()                返回栈中元素的个数</span><br><span class="line">s.pop()                 删除栈顶元素但不返回其值</span><br><span class="line">s.top()                 返回栈顶的元素，但不删除该元素</span><br><span class="line">s.push()                在栈顶压入新元素</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s; <span class="comment">// 定义⼀个空栈s</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        s.push(i); <span class="comment">// 将元素i压⼊栈s中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 访问s的栈顶元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出s的元素个数</span></span><br><span class="line">    s.pop(); <span class="comment">// 移除栈顶元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push(x):将x元素接到队列的末端；</span><br><span class="line">q.pop() 弹出队列的第一个元素，并不会返回元素的值；</span><br><span class="line">q.front()访问队首元</span><br><span class="line">q.back()访问队尾元素</span><br><span class="line">q.size()访问队中的元素个数</span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p><strong>优先队列</strong>是<a href="https://zh.wikipedia.org/wiki/计算机科学" target="_blank" rel="noopener">计算机科学</a>中的一类<a href="https://zh.wikipedia.org/wiki/抽象數據類型" target="_blank" rel="noopener">抽象数据类型</a>。优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列往往用<strong><a href="https://zh.wikipedia.org/wiki/堆_(数据结构)" target="_blank" rel="noopener">堆</a></strong>来实现。</p><p><a href="https://blog.csdn.net/weixin_43906799/article/details/104768586?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158840359519724839228535%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=158840359519724839228535&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-1" target="_blank" rel="noopener">详情请看我另一个博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">q.empty()          如果队列为空，则返回<span class="literal">true</span>，否则返回<span class="literal">false</span> </span><br><span class="line">q.size()           返回队列中元素的个数</span><br><span class="line">q.pop()            删除队首元素，但不返回其值</span><br><span class="line">q.top()            返回具有最高优先级的元素值，但不删除该元素</span><br><span class="line">q.push()       在基于优先级的适当位置插入新元素</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><code>set</code>是集合，⼀个<code>set</code>⾥⾯的各元素是各不相同的，⽽且<code>set</code>会按照元素进⾏从⼩到⼤排序以下是<code>set</code>的常⽤⽤法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.insert(<span class="number">2</span>);<span class="comment">//向集合添加元素</span></span><br><span class="line">    s.insert(<span class="number">3</span>);<span class="comment">//向集合添加元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(s.begin()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出第一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//插入0 - 9</span></span><br><span class="line">        s.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;<span class="comment">//集合的遍历，it是一个迭代的指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; (s.find(<span class="number">2</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//查找，元素</span></span><br><span class="line">    s.erase(<span class="number">3</span>);<span class="comment">//删除元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (s.find(<span class="number">3</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map-字典-映射"><a href="#map-字典-映射" class="headerlink" title="map/字典/映射"></a>map/字典/映射</h3><p>map是键值对，⽐如⼀个⼈身份证对应⼀个人的信息，就可以定义⼀个字符串类型的身份证字符串为“键”，个人信息为“值”，如map&lt;string, int&gt; m;map会⾃动将所有的键值对按照键从⼩到⼤排序。</p><p>类似于python的字典，键值唯一。</p><p>map使⽤时的头⽂件#include <map>以下是map中常⽤的⽅法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; m;</span><br><span class="line">    m[<span class="string">"hello"</span>] = <span class="string">"world"</span>; <span class="comment">// 存储键为 "hello" 值为 "world"的键值对</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m[<span class="string">"hello"</span>] &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 访问map中key为"hello"的value,</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m[<span class="string">"world"</span>] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 如果key不存在，则返回0或空</span></span><br><span class="line">    m[<span class="string">"world"</span>] = <span class="string">"test"</span>; <span class="comment">// 将"world"键对应的值修改为3</span></span><br><span class="line">    m[<span class="string">"key"</span>] = <span class="string">"value"</span>; <span class="comment">// 设置键为 "key" 值为"value" 的键值对</span></span><br><span class="line">    <span class="comment">//迭代器遍历，输出map中所有的元素，键it-&gt;first获取，值it-&gt;second获取</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.begin()-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; m.begin()-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 访问map的第一个元素，输出它的键和值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.rbegin()-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; m.rbegin()-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 访问map的最后一个元素，输出它的键和值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 输出map的元素个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p><strong>在c++中，vector是一个十分有用的\</strong>容器*<em>。*</em></p><p>作用：它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够<strong>存放任意类型的动态数组</strong>，能够<strong>增加和压缩数据。</strong></p><p>新建一个向量存储<code>int</code>类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test; <span class="comment">// 定义的时候不指定vector的⼤⼩</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test2(<span class="number">6</span>); <span class="comment">// 定义的时候指定vector的⼤⼩，默认test2⾥⾯元素都是0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test3(<span class="number">6</span>, <span class="number">3</span>); <span class="comment">// 定义的时候指定vector的⼤⼩，默认test3⾥⾯元素都是3</span></span><br></pre></td></tr></table></figure><p>尾部添加两个元素，0的位置存储5， 1 的位置存储8</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.push_back(<span class="number">5</span>);</span><br><span class="line">test.push_back(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>插入元素 <code>insert</code> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.insert(test.begin()+i,value);<span class="comment">//在第i+1个元素前面插入value;</span></span><br></pre></td></tr></table></figure><p>删除元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.erase(test.begin() + <span class="number">5</span>);<span class="comment">//删除第6个元素</span></span><br></pre></td></tr></table></figure><p>清空向量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.clear();<span class="comment">//clear</span></span><br></pre></td></tr></table></figure><p>获取向量的大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.size();</span><br></pre></td></tr></table></figure><p>获取起始地址或结束地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.begin();<span class="comment">//起始地址</span></span><br><span class="line">test.end();<span class="comment">//结束地址</span></span><br></pre></td></tr></table></figure><p>遍历向量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test::iterator it = m.begin(); it != m.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反转元素，逆序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(test.begin(),test.end());<span class="comment">//反转</span></span><br></pre></td></tr></table></figure><p>使用<code>sort</code>排序，可以自定义排序规则</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(test.begin(),test.end());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
