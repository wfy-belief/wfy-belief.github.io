<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客建设</title>
      <link href="/2020/05/06/bo-ke-da-jian/"/>
      <url>/2020/05/06/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="文章推送"><a href="#文章推送" class="headerlink" title="文章推送"></a>文章推送</h3><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认 true)</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr></tbody></table><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p>参考文档 <a href="https://docs.jerryc.me/#/zh-cn/config/theme-page?id=post-front-matter" target="_blank" rel="noopener">中文文档</a></p><p>参考博客 <a href="https://www.antmoe.com/categories/Hexo/" target="_blank" rel="noopener">小康博客</a></p><p>参考博客 <a href="https://xingjiahui.top/" target="_blank" rel="noopener">XJHui’s Blog</a></p><p>参考博客 <a href="https://xiabor.com/" target="_blank" rel="noopener">Xuexi’s Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about</title>
      <link href="/2020/05/06/index/"/>
      <url>/2020/05/06/index/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h3 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h3><ul><li>网名：星.夜</li><li>标签：<code>技术控</code>、<code>阳光</code>、<code>python</code>、<code>java</code>，<code>c/c++</code>，喜欢音乐、<code>linuxer</code>，目前是本科大二学生。</li><li>码云：<a href="https://gitee.com/wfy-belief" target="_blank" rel="noopener">https://gitee.com/wfy-belief</a></li><li>Github：<a href="https://github.com/wfy-belief" target="_blank" rel="noopener">https://github.com/wfy-belief</a></li></ul><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul><li>手机：<code>NULL</code></li><li>Email：<a href="1335680234@qq.com">1335680234@qq.com</a></li><li>QQ/微信号：<code>1335680234</code></li></ul><h3 id="学校经历"><a href="#学校经历" class="headerlink" title="学校经历"></a>学校经历</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>再也不用c刷题了!!——c++刷题必备</title>
      <link href="/2020/05/05/zai-ye-bu-yong-c-shua-ti-liao-c-shua-ti-bi-bei/"/>
      <url>/2020/05/05/zai-ye-bu-yong-c-shua-ti-liao-c-shua-ti-bi-bei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>title: hello world<br>tags:</p><ul><li>c</li><li>c++</li><li>python</li><li>博客<br>date: 2020-05-05 16:39:33<blockquote><p>致读者： 博主是一名数据科学与大数据专业大二的学生，真正的一个互联网萌新，<font color='#ffb6b9'>写博客一方面是为了记录自己的学习历程，一方面是希望能够帮助到很多和自己一样处于困惑的读者。</font>由于水平有限，博客中难免会有一些错误，有纰漏之处恳请各位大佬不吝赐教！之后会写大数据专业的文章哦。<font color='#ffb6b9'>尽管当前水平可能不及各位大佬，但我会尽我自己所能，做到最好☺</font>。——天地有正气，杂然赋流形。下则为河岳，上则为日星。</p></blockquote></li></ul><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://api.lyiqk.cn/purelady?cdd6a546" alt=""></p><p>csdn出处 <a href="https://blog.csdn.net/weixin_43906799/article/details/105889649" target="_blank" rel="noopener">博客链接</a></p><p>还记得大一上学期含泪用c刷题，那感觉简直爽的不行，后来结识c++发现我错过了一个亿，所以分享一下用<code>c++</code>刷题所用到的基础知识。</p><p>结识算法和OJ就是在大学阶段，当时老师提到OJ，我也是一脸懵，啥是OJ？</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200502155944570.jpeg#pic_center" alt=""></p><p>后来慢慢开始入门，从校赛第三名，到后来的ACM培训，经历了很多，也学习了很多东西。刷题大约有1000多道了，以后刷题应该暂时不会了，大二就要学习我们大数据专业知识啦。</p><h3 id="从c-gt-c"><a href="#从c-gt-c" class="headerlink" title="从c-&gt;c++"></a>从c-&gt;c++</h3><p><strong>C语言作为初学者的一门语言，为什么从大一就要开始学呐？</strong></p><ul><li>相较于其它编程语言（<code>python</code>），<code>C</code>语言是一个比较低级的语言，这样低级的语言，往往能够让我们更加了解计算机。</li><li>因为比较底层，C语言的执行效率比较高，同样的程序执行效果，肯定C语言执行速度快。</li><li>C语言作为编程界历史最悠久的语言之一，而且至今仍然流行。</li><li>如果学习过C语言，就能发现学习后面再学习任何高级编程语言都变得轻而易举。</li></ul><p>同时，正因为C语言什么都没有，排序，字符串，栈，队列等等，如果刷题的时候，都要自己去实现的话，未免有点浪费时间（前提是你已经很熟悉了，比较基础才是重中之重，知其然，更要知其所以然），所以使用c++刷题，能够提升效率一大截。</p><ul><li><code>c++</code>能够完全支持<code>c</code>，打开一个<code>c++</code>文件，用<code>c</code>语言的知识写，完全能够运行（关键字不冲突情况下）。</li><li><code>c++</code>的<code>STL</code>模板库，刷题必备啊！！！栈和队列，集合，向量。用过的都说好。</li><li>字符串处理更加方便，字符数组的方式，每次都不太方便，还有注意<code>\0</code> 结束符的问题。</li></ul><p>学会了这些，走向人生……</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://pic.cr173.com/up/2016-10/20161028134135986080.jpg!320_500" alt=""></p><h3 id="C-头文件"><a href="#C-头文件" class="headerlink" title="C++头文件"></a>C++头文件</h3><p>如果就是为了刷题，那其实就很简单了。</p><p>C语言我们知道头文件是以 <code>#include&lt;stdio.h&gt;</code> 导入头文件，而C++则是用 <code>#include&lt;iostream&gt;</code> 导入头文件。</p><p>如果我们想调用C语言头文件怎么办，那就是就是去掉 <code>.h</code> 然后前面加上 <code>c</code>。</p><p>例如，在c++里面引入c语言输入输出的头文件。</p><p><code>#include&lt;cstdio&gt;</code> 这样就能够成功导入了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; // 相当于C语⾔⾥⾯的#include &lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; // 相当于C语⾔⾥⾯的#include &lt;stdib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt; // 相当于C语⾔⾥⾯的#include &lt;ctype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; // 相当于C语⾔⾥⾯的#include &lt;string.h&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>刷题时候都是为了方便，所以才使用 <code>using namespace std;</code> 这样想使用什么直接写就行了。</p><p>如果不这样引入，你写的算法可能是这样的 <code>std::</code> 占据注意地方，而且会影响比赛，刷题速度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>引入之后：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>看着美观多了。</p><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><p> <strong>标准输入流（<code>cin</code>）</strong></p><p>预定义的对象 <strong><code>cin</code></strong> 是 <strong>iostream</strong> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<strong><code>cin</code></strong> 是与流提取运算符 &gt;&gt; 结合使用的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>标准输出流（<code>cout</code>）</strong></p><p>预定义的对象 <strong><code>cout</code></strong> 是 <strong><code>iostream</code></strong> 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。<strong><code>cout</code></strong> 是与流插入运算符 &lt;&lt; 结合使用的，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[] = <span class="string">"Hello C++"</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of str is : "</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流插入运算符 &lt;&lt; 在一个语句中可以多次使用，如上面实例中所示，<strong><code>endl</code></strong> 用于在行末添加一个换行符。</p><p><code>cin</code> 和 <code>cout</code> ⽐较⽅便，不⽤像C语⾔⾥的<code>scanf</code>、<code>printf</code>那样写得那样繁琐，<code>cin &gt;&gt; n;</code>和<code>scanf(&quot;%d&quot;, &amp;n);</code>⼀样（⽽且⽤cin再也不⽤担⼼像<code>scanf</code>⼀样忘记写取地址符&amp;了）<br>同样，<code>cout &lt;&lt; n;</code>和<code>printf(&quot;%d&quot;, n);</code>此时<code>cout</code>是向左的两个箭头，注意和<code>cin</code>区分开来。⽽且不管<code>n</code>是<code>double</code>还是<code>int</code>或者是<code>char</code>类型，只⽤写<code>cin &gt;&gt; n;</code> 和<code>cout &lt;&lt; n;</code>这样简单的语句就好，不⽤像C语⾔中需要根据n的类型对应地写<code>%lf、%d、%c</code>这样麻烦。 </p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><code>c++</code>用到最多的就是字符串了，跟之前的字符数组类似，但是字符数组，操作起来相当麻烦，显然使用<code>c++</code>的字符串会方便的多。</p><p><strong>定义一个字符串</strong>，导入库 <code>&lt;string&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"hello world"</span>;<span class="comment">//赋值</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">s = <span class="string">"world"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p><strong>字符串拼接</strong>（可以直接相加）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">" world"</span>;</span><br><span class="line"><span class="built_in">string</span> s = s1 + s2;<span class="comment">//拼接直接使用 + 号</span></span><br></pre></td></tr></table></figure><p><strong>读入字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s; <span class="comment">// 定义⼀个空字符串s</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;<span class="comment">//不包括空格</span></span><br><span class="line">getline(<span class="built_in">cin</span>, s); <span class="comment">// 读取⼀整⾏的字符串，包括空格</span></span><br></pre></td></tr></table></figure><p><strong>字符串长度</strong>(两种方法等价)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = s.size();<span class="comment">//字符串s的⻓度</span></span><br><span class="line"><span class="keyword">int</span> len = s.length();<span class="comment">//字符串s的⻓度</span></span><br></pre></td></tr></table></figure><p><strong>查找字符串t是否是s的子串</strong></p><p>如果t是s的子串则返回首次匹配的位置，否则返回 string::npos 或 -1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.find(t);</span><br></pre></td></tr></table></figure><p><code>begin</code> 和 <code>end</code> 方法</p><p>begin()函数返回一个迭代器,指向字符串的<font color = red>第一个元素</font>.返回值是字符串的首地址，取值为*</p><p>end()函数返回一个迭代器,指向字符串的<font color = red>最后一个元素</font>.返回值是字符串的首地址，取值为*</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">" world"</span>;</span><br><span class="line">s1.append(s2);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*s1.begin()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*s1.end()&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>反转字符串</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"hello world"</span>;</span><br><span class="line">reverse(s.begin(), s.end());</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">dlrow olleh</span><br></pre></td></tr></table></figure><p><strong>截取某个字符串中的⼦串</strong> <code>substr</code> 这个函数在处理字符串的题目很常用，当然，用这个方法很多时候会 <font color = red><code>TLE</code></font></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> s = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="built_in">string</span> s1 = s.substr(<span class="number">6</span>);<span class="comment">//下标6开始到结束</span></span><br><span class="line"><span class="built_in">string</span> s2 = s.substr(<span class="number">0</span>, <span class="number">11</span>);<span class="comment">//下标0开始，截取11个字符</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">world</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>使用标准库的栈和队列时，先包含相关的头文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.empty()               如果栈为空返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span><br><span class="line">s.size()                返回栈中元素的个数</span><br><span class="line">s.pop()                 删除栈顶元素但不返回其值</span><br><span class="line">s.top()                 返回栈顶的元素，但不删除该元素</span><br><span class="line">s.push()                在栈顶压入新元素</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s; <span class="comment">// 定义⼀个空栈s</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">        s.push(i); <span class="comment">// 将元素i压⼊栈s中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 访问s的栈顶元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出s的元素个数</span></span><br><span class="line">    s.pop(); <span class="comment">// 移除栈顶元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">q.push(x):将x元素接到队列的末端；</span><br><span class="line">q.pop() 弹出队列的第一个元素，并不会返回元素的值；</span><br><span class="line">q.front()访问队首元</span><br><span class="line">q.back()访问队尾元素</span><br><span class="line">q.size()访问队中的元素个数</span><br></pre></td></tr></table></figure><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><p><strong>优先队列</strong>是<a href="https://zh.wikipedia.org/wiki/计算机科学" target="_blank" rel="noopener">计算机科学</a>中的一类<a href="https://zh.wikipedia.org/wiki/抽象數據類型" target="_blank" rel="noopener">抽象数据类型</a>。优先队列中的每个元素都有各自的优先级，优先级最高的元素最先得到服务；优先级相同的元素按照其在优先队列中的顺序得到服务。优先队列往往用<strong><a href="https://zh.wikipedia.org/wiki/堆_(数据结构)" target="_blank" rel="noopener">堆</a></strong>来实现。</p><p><a href="https://blog.csdn.net/weixin_43906799/article/details/104768586?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522158840359519724839228535%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=158840359519724839228535&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v25-1" target="_blank" rel="noopener">详情请看我另一个博客</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">q.empty()          如果队列为空，则返回<span class="literal">true</span>，否则返回<span class="literal">false</span> </span><br><span class="line">q.size()           返回队列中元素的个数</span><br><span class="line">q.pop()            删除队首元素，但不返回其值</span><br><span class="line">q.top()            返回具有最高优先级的元素值，但不删除该元素</span><br><span class="line">q.push()       在基于优先级的适当位置插入新元素</span><br></pre></td></tr></table></figure><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p><code>set</code>是集合，⼀个<code>set</code>⾥⾯的各元素是各不相同的，⽽且<code>set</code>会按照元素进⾏从⼩到⼤排序以下是<code>set</code>的常⽤⽤法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">    s.insert(<span class="number">2</span>);<span class="comment">//向集合添加元素</span></span><br><span class="line">    s.insert(<span class="number">3</span>);<span class="comment">//向集合添加元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(s.begin()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出第一个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">//插入0 - 9</span></span><br><span class="line">        s.insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;<span class="comment">//集合的遍历，it是一个迭代的指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; (s.find(<span class="number">2</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//查找，元素</span></span><br><span class="line">    s.erase(<span class="number">3</span>);<span class="comment">//删除元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (s.find(<span class="number">3</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map-字典-映射"><a href="#map-字典-映射" class="headerlink" title="map/字典/映射"></a>map/字典/映射</h3><p>map是键值对，⽐如⼀个⼈身份证对应⼀个人的信息，就可以定义⼀个字符串类型的身份证字符串为“键”，个人信息为“值”，如map&lt;string, int&gt; m;map会⾃动将所有的键值对按照键从⼩到⼤排序。</p><p>类似于python的字典，键值唯一。</p><p>map使⽤时的头⽂件#include <map>以下是map中常⽤的⽅法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; m;</span><br><span class="line">    m[<span class="string">"hello"</span>] = <span class="string">"world"</span>; <span class="comment">// 存储键为 "hello" 值为 "world"的键值对</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m[<span class="string">"hello"</span>] &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 访问map中key为"hello"的value,</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m[<span class="string">"world"</span>] &lt;&lt; <span class="built_in">endl</span>;<span class="comment">// 如果key不存在，则返回0或空</span></span><br><span class="line">    m[<span class="string">"world"</span>] = <span class="string">"test"</span>; <span class="comment">// 将"world"键对应的值修改为3</span></span><br><span class="line">    m[<span class="string">"key"</span>] = <span class="string">"value"</span>; <span class="comment">// 设置键为 "key" 值为"value" 的键值对</span></span><br><span class="line">    <span class="comment">//迭代器遍历，输出map中所有的元素，键it-&gt;first获取，值it-&gt;second获取</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;::iterator it = m.begin(); it != m.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.begin()-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; m.begin()-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 访问map的第一个元素，输出它的键和值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.rbegin()-&gt;first &lt;&lt; <span class="string">" "</span> &lt;&lt; m.rbegin()-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 访问map的最后一个元素，输出它的键和值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; m.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 输出map的元素个数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><p><strong>在c++中，vector是一个十分有用的\</strong>容器*<em>。*</em></p><p>作用：它能够像容器一样存放各种类型的对象，简单地说，vector是一个能够<strong>存放任意类型的动态数组</strong>，能够<strong>增加和压缩数据。</strong></p><p>新建一个向量存储<code>int</code>类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test; <span class="comment">// 定义的时候不指定vector的⼤⼩</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test2(<span class="number">6</span>); <span class="comment">// 定义的时候指定vector的⼤⼩，默认test2⾥⾯元素都是0</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test3(<span class="number">6</span>, <span class="number">3</span>); <span class="comment">// 定义的时候指定vector的⼤⼩，默认test3⾥⾯元素都是3</span></span><br></pre></td></tr></table></figure><p>尾部添加两个元素，0的位置存储5， 1 的位置存储8</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.push_back(<span class="number">5</span>);</span><br><span class="line">test.push_back(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>插入元素 <code>insert</code> </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.insert(test.begin()+i,value);<span class="comment">//在第i+1个元素前面插入value;</span></span><br></pre></td></tr></table></figure><p>删除元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.erase(test.begin() + <span class="number">5</span>);<span class="comment">//删除第6个元素</span></span><br></pre></td></tr></table></figure><p>清空向量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.clear();<span class="comment">//clear</span></span><br></pre></td></tr></table></figure><p>获取向量的大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test.size();</span><br></pre></td></tr></table></figure><p>获取起始地址或结束地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.begin();<span class="comment">//起始地址</span></span><br><span class="line">test.end();<span class="comment">//结束地址</span></span><br></pre></td></tr></table></figure><p>遍历向量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;test::iterator it = m.begin(); it != m.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>反转元素，逆序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(test.begin(),test.end());<span class="comment">//反转</span></span><br></pre></td></tr></table></figure><p>使用<code>sort</code>排序，可以自定义排序规则</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(test.begin(),test.end());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2020/05/05/hello-world/"/>
      <url>/2020/05/05/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> Hosgj </tag>
            
            <tag> Hexo </tag>
            
            <tag> ipad </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2020/05/05/ge-ren-jian-li/"/>
      <url>/2020/05/05/ge-ren-jian-li/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://api.lyiqk.cn/purelady?cdd6a546" alt="11"></p><h3 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h3><ul><li>网名：星.夜</li><li>标签：<code>技术控</code>、<code>阳光</code>、<code>python</code>、<code>java</code>，<code>c/c++</code>，喜欢音乐、<code>linuxer</code>，目前是本科大二学生。</li><li>码云：<a href="https://gitee.com/wfy-belief" target="_blank" rel="noopener">https://gitee.com/wfy-belief</a></li><li>Github：<a href="https://github.com/wfy-belief" target="_blank" rel="noopener">https://github.com/wfy-belief</a></li></ul><hr><h3 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h3><ul><li>手机：<code>NULL</code></li><li>Email：<a href="1335680234@qq.com">1335680234@qq.com</a></li><li>QQ/微信号：<code>1335680234</code></li></ul><hr><h3 id="学校经历"><a href="#学校经历" class="headerlink" title="学校经历"></a>学校经历</h3>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> hexo </tag>
            
            <tag> ASG </tag>
            
            <tag> sgkaj </tag>
            
            <tag> 动漫 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2020/05/05/bo-ke-shi-yong-shuo-ming/"/>
      <url>/2020/05/05/bo-ke-shi-yong-shuo-ming/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>沉下心，方得风平浪静。</p></blockquote><p>2020.4.28 – 关于使用HTML网格页面代码无法复制的事情，请大家手动复制，暂时不能一键复制，请见谅。</p><p>2020.4.27 – bug已修复，原因是某篇随笔未知bug原因，造成的错误。猜测可能是关键字屏蔽。</p><p>到2020.4.26日为止，入住博客园大致也已经有十多天了，这些天里，大致就是不断的维护bug，修改主题配色，也看了许多博主的博客，看了几千行的代码。大致也确定下来了自己的博客样貌。</p><p>今天，主要就是随笔分类无法显示的bug，还有随笔档案的bug，无法加载本月的随笔档案。具体请看<strong><a href="https://www.cnblogs.com/wfybeliefs#/cnblog/works/article/12763484" target="_blank" rel="noopener">维护日志</a></strong>，这个地方会每天更新各种维护信息。</p><p>在<strong><a href="https://www.cnblogs.com/wfybeliefs#/cnblog/works/article/12766608" target="_blank" rel="noopener">望闻录</a></strong>里面主要会记录自己所听所见所想所学。</p><p>还有……..待完善。</p><p>关于浏览器问题，请使用 <strong>谷歌浏览器</strong> 不然真的会有问题的，各种JS都无法加载。</p><p>今天也更改了自己的博客地址名字 <code>wfy-beliefs</code> 为 <code>wfybeliefs</code>，开始以为是中间特殊符号的问题，后来发现并不是。</p><p>如果遇到各种地址错误问题，请<strong><a href="https://msg.cnblogs.com/send/wfybeliefs" target="_blank" rel="noopener">联系</a></strong>我。</p><ol><li>1、</li><li>54</li><li>54</li></ol><h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><p>可能很多人还不知道阅读模式的使用。</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200426185910494.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200426185948847.png" alt=""></p><h3 id="随笔分类"><a href="#随笔分类" class="headerlink" title="随笔分类"></a>随笔分类</h3><p>如果想要看某一类的文章，请点击，随笔分类一栏。</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200426184925172.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200426184940227.png" alt=""></p><h3 id="随笔档案"><a href="#随笔档案" class="headerlink" title="随笔档案"></a>随笔档案</h3><p>随笔归档目前存在bug。</p><h3 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h3><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200426185216802.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200426185244804.png" alt=""></p><h3 id="地址变更"><a href="#地址变更" class="headerlink" title="地址变更"></a>地址变更</h3><p>由 <s><a href="https://www.cnblogs.com/wfy-beliefs" target="_blank" rel="noopener">https://www.cnblogs.com/wfy-beliefs</a></s> 变更为 <strong><a href="https://www.cnblogs.com/wfybeliefs" target="_blank" rel="noopener">https://www.cnblogs.com/wfybeliefs</a></strong></p><p>待更新……</p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> c++ </tag>
            
            <tag> python </tag>
            
            <tag> 博客 </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2020/05/05/wang-wen-lu/"/>
      <url>/2020/05/05/wang-wen-lu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><div style="position: relative; padding: 30% 45%;">2<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://player.bilibili.com/player.html?cid=149407340&aid=87442734&page=1&as_wide=1&high_quality=1&danmaku=0" frameborder="no" scrolling="no"></iframe>3</div><h3 id="2020-5-4"><a href="#2020-5-4" class="headerlink" title="2020.5.4"></a>2020.5.4</h3><p>操作系统实验！！</p><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img2020.cnblogs.com/blog/2009600/202005/2009600-20200504182048541-2033788110.jpg" alt=""></p><h3 id="2020-5-3"><a href="#2020-5-3" class="headerlink" title="2020.5.3"></a>2020.5.3</h3><p>今日无。</p><h3 id="2020-5-2"><a href="#2020-5-2" class="headerlink" title="2020.5.2"></a>2020.5.2</h3><ul><li>暂时不开放期末复习专版（设置密码）</li><li>更新csdn博客 <a href="https://blog.csdn.net/weixin_43906799/article/details/105883230" target="_blank" rel="noopener">程序员的浪漫，把这个玫瑰花代码送给你的那个他/她吧</a></li><li>更新csdn博客 <a href="https://blog.csdn.net/weixin_43906799/article/details/105881318" target="_blank" rel="noopener">学妹不会的数据结构-线性表合集</a></li><li>更新csdn博客 <a href="https://blog.csdn.net/weixin_43906799/article/details/105889649" target="_blank" rel="noopener">再也不用c刷题了!!——c++刷题必备</a></li></ul><h3 id="2020-5-1"><a href="#2020-5-1" class="headerlink" title="2020.5.1"></a>2020.5.1</h3><ul><li>更新 [四月维护记录](</li></ul><h3 id="2020-4-30"><a href="#2020-4-30" class="headerlink" title="2020.4.30"></a>2020.4.30</h3><p>学习粒子群优化算法。</p><p>明天开始爆肝。</p><h3 id="2020-4-29"><a href="#2020-4-29" class="headerlink" title="2020.4.29"></a>2020.4.29</h3><p>认识一个大数据大佬，感慨许久，每个人都有每个人的方向，加油加油！！！</p><p>更新博客内容若干，详见<a href="https://www.cnblogs.com/wfybeliefs/p/12748405.html#/cnblog/works/article/12763484" target="_blank" rel="noopener">维护日志</a></p><h3 id="2020-4-28"><a href="#2020-4-28" class="headerlink" title="2020.4.28"></a>2020.4.28</h3><p>数据结构实验完成。</p><p>计划整理笔记。</p><h3 id="2020-4-27"><a href="#2020-4-27" class="headerlink" title="2020.4.27"></a>2020.4.27</h3><p><strong><s>修复未知错误造成的归档错误</s></strong></p><p><strong><S>完成数据结构的所有代码！！！！现在是凌晨0：07！！</S></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">LIST</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">TREE</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> high;</span><br><span class="line">    <span class="keyword">int</span> low;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">    <span class="keyword">int</span> code_index;</span><br><span class="line">    <span class="keyword">char</span> code[<span class="number">100</span>];</span><br><span class="line">    TREE Left;</span><br><span class="line">    TREE Right;</span><br><span class="line">    LIST NEXT;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(LIST head, LIST tmp)</span></span>;<span class="comment">//有序插入结点</span></span><br><span class="line"><span class="function">LIST <span class="title">find_and_insert</span><span class="params">(LIST head, LIST tmp)</span></span>;<span class="comment">//弹出内部的结点，然后调用insert函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(LIST head)</span></span>;<span class="comment">//输出这个读取文件的所有字符统计情况</span></span><br><span class="line"><span class="function">LIST <span class="title">init_LIST</span><span class="params">(<span class="keyword">int</span> high, <span class="keyword">int</span> low, <span class="keyword">int</span> weight)</span></span>;<span class="comment">//初始化链表信息</span></span><br><span class="line"><span class="function">TREE <span class="title">tree_node_init</span><span class="params">(<span class="keyword">int</span> high, <span class="keyword">int</span> low, <span class="keyword">int</span> weight)</span></span>;<span class="comment">//初始化哈夫曼树各个结点</span></span><br><span class="line"><span class="function">TREE <span class="title">build_tree</span><span class="params">(LIST head)</span></span>;<span class="comment">//建立哈夫曼树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_huffman_pre</span><span class="params">(TREE Tree, <span class="keyword">int</span> flag)</span></span>;<span class="comment">//前序输出,flag 控制是否打印信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_tree</span><span class="params">(TREE Tree)</span></span>;<span class="comment">//更新树的信息，也即更新编码信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save_file</span><span class="params">(TREE *a, <span class="keyword">int</span> right, TREE Tree)</span></span>;<span class="comment">//保存文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_free_tree</span><span class="params">(TREE Tree)</span></span>;<span class="comment">//释放树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_free_list</span><span class="params">(LIST head)</span></span>;<span class="comment">//释放链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">coding</span><span class="params">()</span></span>;<span class="comment">//编码</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decoding</span><span class="params">()</span></span>;</span><br><span class="line">TREE <span class="built_in">queue</span>[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> queue_index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum_bit_coding = <span class="number">0</span>;<span class="comment">//编码bit</span></span><br><span class="line"><span class="keyword">int</span> sum_bit_decoding = <span class="number">0</span>;<span class="comment">//解码bit</span></span><br><span class="line"><span class="keyword">char</span> file_in[<span class="number">100</span>] = <span class="string">"D:\\file.txt"</span>;<span class="comment">//路径</span></span><br><span class="line"><span class="keyword">char</span> file_out[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_main</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><h3 id="2020-4-26"><a href="#2020-4-26" class="headerlink" title="2020.4.26"></a>2020.4.26</h3><p><img src="https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/loading.gif" data-original="https://img-blog.csdnimg.cn/20200426190832830.png" alt=""></p><p><strong><s>更改博客地址名字。</s></strong></p><p><strong><S>完成数据结构实验解码部分。</S></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decoding</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum_bits = <span class="number">0</span>;</span><br><span class="line">    FILE *in = fopen(<span class="string">"D:\\coding.txt"</span>,<span class="string">"r"</span>);</span><br><span class="line">    FILE *out = fopen(<span class="string">"D:\\encoding.txt"</span>, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">int</span> str_index = <span class="number">0</span>, left;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(left = <span class="number">0</span>; left &lt; queue_index; left++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, <span class="built_in">queue</span>[left]-&gt;code);</span><br><span class="line">    <span class="keyword">while</span>((ch = fgetc(in)) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        str[str_index++] = ch;</span><br><span class="line">        str[str_index] = <span class="string">'\0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(left = <span class="number">0</span>; left &lt; queue_index; left++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="built_in">queue</span>[left]-&gt;code, str) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//bits</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">queue</span>[left]-&gt;high &gt; <span class="number">128</span>) sum_bits += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> sum_bits += <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">fprintf</span>(out, <span class="string">"%c"</span>, <span class="built_in">queue</span>[left]-&gt;high);</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">queue</span>[left]-&gt;high &gt; <span class="number">128</span>) <span class="built_in">fprintf</span>(out, <span class="string">"%c"</span>, <span class="built_in">queue</span>[left]-&gt;low);</span><br><span class="line">                str_index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"共写入解码文件%d字节"</span>, sum_bits * <span class="number">8</span> );</span><br><span class="line">    fclose(in);</span><br><span class="line">    fclose(out);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2020-4-25"><a href="#2020-4-25" class="headerlink" title="2020.4.25"></a>2020.4.25</h3><p><strong><S>观看编码讲解，ASCII、GB2312、GBK、Unicode、UTF-8。</S></strong></p><p><strong><S>完成数据结构 <code>哈夫曼编码</code> 实验部分代码。</S></strong></p><S><table><thead><tr><th>函数</th><th>功能</th></tr></thead><tbody><tr><td>void insert(LIST head, LIST tmp)</td><td>有序插入结点</td></tr><tr><td>LIST find_and_insert(LIST head, LIST tmp)</td><td>弹出内部的结点，然后调用insert函数</td></tr><tr><td>void output(LIST head)</td><td>输出这个读取文件的所有字符统计情况</td></tr><tr><td>LIST init_LIST(int high, int low, int weight)</td><td>初始化链表信息</td></tr><tr><td>TREE tree_node_init(int high, int low, int weight)</td><td>初始化哈夫曼树各个结点</td></tr><tr><td>TREE build_tree(LIST head)</td><td>建立哈夫曼树</td></tr><tr><td>void coding()</td><td>编码</td></tr><tr><td>void print_huffman_pre(TREE Tree)</td><td>前序输出</td></tr><tr><td>void update_tree(TREE Tree)</td><td>更新树的信息，也即更新编码信息</td></tr><tr><td>void save_file(TREE *a, int right, TREE Tree)</td><td>保存文件</td></tr><tr><td>void to_free_tree(TREE Tree)</td><td>释放树</td></tr><tr><td>void to_free_list(LIST head)</td><td>释放链表</td></tr></tbody></table></S><p><strong><s>  修复若干<a href="https://www.cnblogs.com/wfybeliefs/p/12748405.html#/cnblog/works/article/12763484" target="_blank" rel="noopener">bug  </a></s></strong></p><h3 id="2020-4-24"><a href="#2020-4-24" class="headerlink" title="2020.4.24"></a>2020.4.24</h3><p><strong><s>  完成数据结构实验报告   </s></strong></p><p><strong><s>  修复若干<a href="https://www.cnblogs.com/wfybeliefs/p/12748405.html#/cnblog/works/article/12763484" target="_blank" rel="noopener">bug  </a></s></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> Py </tag>
            
            <tag> HAG </tag>
            
            <tag> 快速公交 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
